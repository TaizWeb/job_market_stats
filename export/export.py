"""Module containing the Export class, which provides ways to export the DB
contents into various formats"""

import matplotlib.pyplot as plt
import pandas as pd

# from export import TECHS
from .search_terms import TECHS


class Export:
    """Class for exporting to various formats, namely csv and plots

    Attributes
    ----------
    None : None
        TODO: Refactor the to_csv to use the init instead

    Methods
    -------
    to_csv(
        year_start: int,
        year_end: int,
        month_step: int = 12,
        category: str = "languages",
    )
        Generates a dict representing the statistics. Used in other class
        methods to display/export the data
    to_csv(stats_dict: dict, filename: str)
        Exports the data dict to a CSV
    to_plot(csv_path: str)
        Plots the data to a popup window
    """

    def __init__(self, database: "Database"):
        self.database = database

    def get_data(
        self,
        year_start: int,
        year_end: int,
        month_step: int = 12,
        category: str = "languages",
    ):
        """Returns a dict representing the statistics

        Parameters
        ----------
        year_start: int
            The starting point of the years to export
        year_end: int
            The ending point of the years to export
        month_step: int = 12
            How often between individual years to export
        category: str = "languages"
            Which section of `search_terms.py` to export

        Returns
        -------
        stats_dict: dict
            The statistics of each technology, per year and count
        """
        data = {"Technology": [], "Count": [], "Year": []}
        # For each technology
        for tech in TECHS[category]:
            # For each year
            for year in list(range(year_start, year_end + 1)):
                names = [tech["name"]] + tech["aliases"]
                for step in range(0, 12, month_step):
                    total_count = 0
                    data["Technology"].append(tech["name"])
                    if step > 0:
                        data["Year"].append(year + round(step / 12, 2))
                    else:
                        data["Year"].append(year)
                    for name in names:
                        total_count += len(
                            self.database.query_postings(
                                year, step + 1, name, tech["case_sensitive"]
                            )
                        )
                    data["Count"].append(total_count)
        return data

    def filter_data(
        self,
        stats_dict: dict,
        include: list = None,
        exclude: list = None,
        in_place: bool = False,
    ):
        """Filters language terms from the dataset

        Parameters
        ----------
        stats_dict: dict
            The statistics of each technology, per year and count
        include: list = None
            Which terms to explicitly include
        exclude: list = None
            Which terms to explicitly exclude
        in_place: bool = False
            If true, will adjust stats_dict automatically

        Returns
        -------
        stats_dict: dict | None
            The modified stats_dict if in_place is False, otherwise, None
        """
        stats_dict_copy = {
            "Technology": [],
            "Count": [],
            "Year": [],
        }
        for i, tech in enumerate(stats_dict["Technology"]):
            if tech in include and tech not in exclude:
                stats_dict_copy["Technology"].append(stats_dict["Technology"][i])
                stats_dict_copy["Count"].append(stats_dict["Count"][i])
                stats_dict_copy["Year"].append(stats_dict["Year"][i])
        if in_place:
            stats_dict.clear()
            stats_dict.update(stats_dict_copy)
            return None
        return stats_dict_copy

    def to_csv(self, stats_dict: dict, filename: str):
        """Exports the data dict to a CSV

        Parameters
        ----------
        stats_dict: dict
            The stats_dict generated by `get_data`
        filename: str
            The filename to save the CSV as
        """
        df = pd.DataFrame(stats_dict)
        df.to_csv(filename, index=False)

    def to_plot(self, csv_path: str, save_as: str = None):
        """Plots the data to a popup window

        Parameters
        ----------
        csv_path: str
            The path to the .csv file (created from to_csv) to plot
        save_as: str = None
            The path to save the plot to. Support various extensions like .png,
            .csv, and .pdf
        """
        # Read the CSV data into a DataFrame
        data = pd.read_csv(csv_path)

        # Pivot the data to make it easier to plot
        pivot_data = data.pivot(index="Year", columns="Technology", values="Count")

        # Plotting
        plt.figure(figsize=(10, 6))

        # Line styles, since this many data points is bad
        styles = ["-", "--", "-.", ":"]

        # Plot each technology's data
        for idx, tech in enumerate(pivot_data.columns):
            plt.plot(
                pivot_data.index,
                pivot_data[tech],
                linestyle=styles[idx % len(styles)],
                label=tech,
            )

        # Adding titles and labels
        plt.title("HN Job Requirements Over Time")
        plt.xlabel("Year")
        plt.ylabel("Job Postings")
        plt.legend(title="Technology")

        # Export to disk
        if save_as is not None:
            plt.savefig(save_as)

        # Show the plot
        plt.show()

    def to_pie_chart(
        self,
        stats_dict: dict,
        year: int,
        include_zeroes: bool = False,
        save_as: str = None,
    ):
        """Creates a pie chart of technologies per given year

        Parameters
        ----------
        stats_dict: dict
            The statistics of each technology, per year and count
        year: int
            The year of data to plot
        include_zeroes: bool = False
            Whether or not to bother including zeroes
        save_as: str = None
            The path to save the plot to. Support various extensions like .png,
            .csv, and .pdf
        """
        df = pd.DataFrame(stats_dict)

        filtered_df = df[df["Year"] == year]

        # Reorganizing data the way plt expects
        pivot_data = filtered_df.pivot_table(index="Technology", values="Count")

        # Setting our axis
        if include_zeroes:
            labels = pivot_data.index
            sizes = pivot_data["Count"]
        else:
            labels = [
                label
                for label, size in zip(pivot_data.index, pivot_data["Count"])
                if size > 0
            ]
            sizes = [size for size in pivot_data["Count"] if size > 0]

        # Plot it
        plt.pie(sizes, labels=labels, autopct="%1.1f%%", startangle=140)
        plt.axis("equal")
        plt.title(f"HN Job Requirements in {year}")

        # Export to disk
        if save_as is not None:
            plt.savefig(save_as)

        # Show the plot
        plt.show()
